package CSRfidJavaMultipleReader;

import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.table.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class TagInventoryFrame extends javax.swing.JFrame implements AsyncCallbackEventListener{

    // <editor-fold defaultstate="collapsed" desc="Variable">
    private class ButtonState{
        final public static int Start = 0;
        final public static int Stop = 1;
        final public static int Unknown = 2;
    }
    private Thread reset;
    private java.util.Timer tagRateTimer = null;
    private java.util.Timer tagRateDebugTimer = null;
    private int m_tagRate = 0;
    private int m_totaltag = 0;
    private int m_tagCount = 0;
    private DefaultTableModel inventoryTableModel;
    private DefaultTableModel rateTableModel;
    private int startButtonState = ButtonState.Unknown;
    private ArrayList InventoryListItems = new ArrayList();
    private ArrayList RateListItems = new ArrayList();

    private final int MAX_THREAD = 50;
    private Thread[] m_run_process = new Thread[MAX_THREAD];
    private Inventory[] m_inventory = new Inventory[MAX_THREAD];
    private boolean ThreadStop = true;
    private int lastThreadId = -1;
    private PrintWriter outputCommand;
    private String JavaProcessPath = "CS203JavaProcessDemo.jar"; // modify it to your desired path
    
    private AsyncCallbackEventListener cls = this;
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Init">
    /** Creates new form TagInventoryFrame */
    public TagInventoryFrame() {
        initComponents();

        //Center the dialog
        Dimension size = getSize();
        setLocation((Main.screen.width - size.width)/2, (Main.screen.height - size.height)/2);

        inventoryTableModel = (DefaultTableModel)table_inventory.getModel();
        rateTableModel = (DefaultTableModel)table_rate.getModel();

        this.setIconImage(new ImageIcon("CSL Logo.jpg").getImage());
    }
    // </editor-fold>

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_start = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_inventory = new javax.swing.JTable();
        btn_clear = new javax.swing.JButton();
        lbl_tagrate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_rate = new javax.swing.JTable();
        cb_debuglog = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Inventory");
        setBackground(java.awt.SystemColor.info);
        setBounds(new java.awt.Rectangle(0, 0, 320, 240));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btn_start.setBackground(new java.awt.Color(0, 192, 0));
        btn_start.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_start.setText("Start");
        btn_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_startActionPerformed(evt);
            }
        });

        table_inventory.setAutoCreateRowSorter(true);
        table_inventory.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        table_inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "PC", "EPC", "RSSI", "Count", "Source"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_inventory.setRowHeight(25);
        table_inventory.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(table_inventory);
        table_inventory.getColumnModel().getColumn(0).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(1).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(2).setPreferredWidth(320);
        table_inventory.getColumnModel().getColumn(3).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(4).setPreferredWidth(40);
        table_inventory.getColumnModel().getColumn(5).setPreferredWidth(130);

        btn_clear.setBackground(java.awt.Color.cyan);
        btn_clear.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        lbl_tagrate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lbl_tagrate.setText("0 tag/s");
        lbl_tagrate.setInheritsPopupMenu(false);
        lbl_tagrate.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Total Tag Rate:");
        jLabel1.setInheritsPopupMenu(false);
        jLabel1.setOpaque(true);

        table_rate.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source", "Device Name", "Rate (tag/s)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_rate);
        table_rate.getColumnModel().getColumn(0).setResizable(false);
        table_rate.getColumnModel().getColumn(1).setResizable(false);
        table_rate.getColumnModel().getColumn(2).setResizable(false);

        cb_debuglog.setText("Save debug log");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(btn_start, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btn_clear, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lbl_tagrate)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(cb_debuglog, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 114, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 366, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btn_start)
                            .add(btn_clear)
                            .add(jLabel1)
                            .add(lbl_tagrate))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(cb_debuglog))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // <editor-fold defaultstate="collapsed" desc="Event">
    public synchronized void AsyncCallbackEvent(AsyncCallbackEventArgs ev)
    {                
        TagCallbackInfo record = ev.info;

        ++m_totaltag;

        int index = Collections.binarySearch(InventoryListItems, ev.info);
        if (index > -1)
        {
            //found a record
            TagCallbackInfo found = ((TagCallbackInfo)InventoryListItems.get(index));
            ++found.count;
            found.rssi = record.rssi;

            int rows = inventoryTableModel.getRowCount();
            for(int i=0;i<rows;i++)
            {
                String value = inventoryTableModel.getValueAt(table_inventory.convertRowIndexToModel(i), 0).toString();
                if(value.equals(Integer.toString(found.index)))
                {
                    table_inventory.setValueAt(new Float(found.rssi), i, 3);
                    table_inventory.setValueAt(new Integer(found.count), i, 4);
                }
            }
        }
        else
        {
            m_tagCount = record.index = InventoryListItems.size();
            InventoryListItems.add(record);
            Object[] entry = new Object[] {new Integer(record.index), record.pc.ToString(), record.epc.ToString(), new Float(record.rssi), new Integer(record.count), record.source};
            inventoryTableModel.addRow(entry);
            Collections.sort(InventoryListItems);
        }
        
        RateInfo ratelist = new RateInfo();

        ratelist.source = record.source;
        ratelist.deviceName = record.deviceName;
        ratelist.count = 1;
        ratelist.debugcount = 0;

        index = Collections.binarySearch(RateListItems, ratelist);
        if (index > -1)
        {
            //found a record
            RateInfo found = ((RateInfo)RateListItems.get(index));
            ++found.count;
            ++found.debugcount;
        }
        else
        {
            RateListItems.add(ratelist);
            Object[] entry = new Object[] {record.source, record.deviceName, new Integer(1)};
            rateTableModel.addRow(entry);
            Collections.sort(RateListItems);
        }
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="UI Handle">
    private void btn_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_startActionPerformed
        if (startButtonState == ButtonState.Start)
        {
            Start();
        }
        else if (startButtonState == ButtonState.Stop)
        {
            Stop();
        }
    }//GEN-LAST:event_btn_startActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Stop();
        evt.getWindow().dispose();
        new NetFinderFrame().setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        SetStartButtonState(ButtonState.Start);
    }//GEN-LAST:event_formWindowOpened

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        int len = inventoryTableModel.getRowCount();
        if (len > 0)
        {
            for (int i = len-1; i >= 0; i--)
                inventoryTableModel.removeRow(i);
        }
        InventoryListItems.clear();
        len = rateTableModel.getRowCount();
        if (len > 0)
        {
            for (int i = len-1; i >= 0; i--)
                rateTableModel.removeRow(i);
        }
        RateListItems.clear();
        m_tagCount = 0;
    }//GEN-LAST:event_btn_clearActionPerformed

    private void Start()
    {
        ThreadStop = false;
        
        int len = rateTableModel.getRowCount();
        if (len > 0)
        {
            for (int i = len-1; i >= 0; i--)
                rateTableModel.removeRow(i);
        }
        RateListItems.clear();
        for (lastThreadId = 0; lastThreadId < Main.ipAddress.length; lastThreadId++)
        {
            RateInfo ratelist = new RateInfo();

            ratelist.source = Main.ipAddress[lastThreadId];
            ratelist.deviceName = Main.deviceName[lastThreadId];
            ratelist.count = 0;

            RateListItems.add(ratelist);
            Object[] entry = new Object[] {ratelist.source, ratelist.deviceName, new Integer(0)};
            rateTableModel.addRow(entry);
            Collections.sort(RateListItems);

            m_inventory[lastThreadId] = new Inventory(Main.deviceName[lastThreadId]);
            m_inventory[lastThreadId].addAsyncCallbackEventListener(cls);
            m_run_process[lastThreadId] = new Thread(new StartInventoryThread(Main.ipAddress[lastThreadId], Main.macAddress[lastThreadId], m_inventory[lastThreadId]));
            m_run_process[lastThreadId].start();
        }
        --lastThreadId;

        tagRateTimer = new java.util.Timer();
        tagRateTimer.schedule(new TagRateTask(), 10, 1000);
        
        if (cb_debuglog.isSelected())
        {
            tagRateDebugTimer = new java.util.Timer();
            tagRateDebugTimer.schedule(new TagRateDebugTask(), 5000, 5000);
        }

        try
        {
            Thread.sleep(1000);
        }
        catch (Exception ex)
        {
            ex.getMessage();
        }

        SetStartButtonState(ButtonState.Stop);
    }

    private void Stop()
    {
        ThreadStop = true;
        for (lastThreadId = 0; lastThreadId < Main.ipAddress.length; lastThreadId++)
        {
            if (m_inventory[lastThreadId] != null)
            {
                m_inventory[lastThreadId].stopInventory = true;
                try
                {
                    Thread.sleep(200);
                }
                catch (Exception ex)
                {
                    ex.getMessage();
                }
                m_inventory[lastThreadId].removeAsyncCallbackEventListener(cls);
                m_inventory[lastThreadId].Disconnect();
            }
        }
        if (tagRateTimer != null)
        {
            tagRateTimer.cancel();
            tagRateTimer = null;
        }
        if (tagRateDebugTimer != null)
        {
            tagRateDebugTimer.cancel();
            tagRateDebugTimer = null;
        }
        lastThreadId = -1;
        SetStartButtonState(ButtonState.Start);
    }

    private void SetStartButtonState(int state)
    {
        if (state == startButtonState)
            return;
        switch (state)
        {
            case ButtonState.Stop:
                startButtonState = ButtonState.Stop;
                btn_start.setText("Stop");
                btn_start.setBackground(java.awt.Color.red);
                btn_clear.setEnabled(false);
                break;
            case ButtonState.Start:
                startButtonState = ButtonState.Start;
                btn_start.setText("Start");
                btn_start.setBackground(new java.awt.Color(0, 192, 0));
                btn_clear.setEnabled(true);
                break;
        }
    }

    class StartInventoryThread implements Runnable
    {
        private String ip;
        private String mac;
        private Inventory inventory;

        StartInventoryThread(String ip, String mac, Inventory inventory) {
            this.ip = ip;
            this.mac = mac;
            this.inventory = inventory;
        }

        public void run() {                   
            inventory.StartInventory(ip);
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Timer Task">
    public class TagRateTask extends TimerTask {
        public void run() {
            m_tagRate = m_totaltag;
            lbl_tagrate.setText(Integer.toString(m_tagRate)+" tag/s");
            m_totaltag = 0;

            int rows = rateTableModel.getRowCount();
            for(int i=0;i<rows;i++)
            {
                RateInfo info = ((RateInfo)RateListItems.get(i));
                table_rate.setValueAt(info.source, i, 0);
                table_rate.setValueAt(info.deviceName, i, 1);
                table_rate.setValueAt(new Integer(info.count), i, 2);
                info.count = 0;
            }
        }
    }
    
    public class TagRateDebugTask extends TimerTask {
        public void run() {
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = null;
            
            int rows = rateTableModel.getRowCount();
            for(int i=0;i<rows;i++)
            {
                RateInfo info = ((RateInfo)RateListItems.get(i));
                
                if (info.debugcount == 0)
                {
                    try {
                        date = new Date();
                        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(info.source + "_debug.txt", true)));
                        out.println(dateFormat.format(date) + " No tag read for 5 seconds");
                        out.close();
                    } catch (IOException e) {
                        System.out.println("Could not write to log file " + e.toString());
                    }
                }
                info.debugcount = 0;
            }
        }
    }
    // </editor-fold>

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TagInventoryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_start;
    private javax.swing.JCheckBox cb_debuglog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_tagrate;
    private javax.swing.JTable table_inventory;
    private javax.swing.JTable table_rate;
    // End of variables declaration//GEN-END:variables

}
